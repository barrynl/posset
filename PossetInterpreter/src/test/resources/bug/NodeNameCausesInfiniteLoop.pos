main
(
	Digit z[A];
	Digit n[B];
	Digit d[C];
	DigitEquals e1
	(
		d1[A];
		d2[C];
		b[D];
	)
	DigitEquals de2 /* something strange is happening here, if you change this name to d2 it succeeds while if the name is de2 it fails. */
	(
		d1[B];
		d2[C];
		b[E];
	)
	Or o1
	(
		first[D];
		second[E];
		third[F];
	)
	True t1[F];
)

DigitEquals
(
	Digit d1[A];
	Digit d2[B];
	Boolean b[G];
	Plus p
	(
		p1[C];
		p2[B];
		p3[A];
	)
	IsZero i
	(
		d1[C];
		b[G];
	)
)

IsZero
(
	Digit d1
	(
		d1[A];
		d2[B];
	)
	Boolean b
	(
		first[C];
	)
)
{
	(A,B,C)
	(#1,#1,#1)
	(#1,#2,#2)
	(#1,#3,#2)
	(#1,#4,#2)
	(#1,#5,#2)
	(#2,#1,#2)
	(#2,#2,#2)
	(#2,#3,#2)
	(#2,#4,#2)
	(#2,#5,#2)
}

Or
(
	Boolean first ( first[A]; )
	Boolean second ( first[B]; )
	Boolean third ( first[C]; )
)
{
	(A,B,C)
	(#1,#1,#1)
	(#1,#2,#1)
	(#2,#1,#1)
	(#2,#2,#2)
}

XOr
(
	Boolean first (first[A];)
	Boolean second (first[B];)
	Boolean third (first[C];)
)
{
	(A,B,C)
	(#1,#1,#2)
	(#1,#2,#1)
	(#2,#1,#1)
	(#2,#2,#2)
}

And
(
	Boolean first (first[A];)
	Boolean second (first[B];)
	Boolean third (first[C];)
)
{
	(A,B,C)
	(#1,#1,#1)
	(#1,#2,#2)
	(#2,#1,#2)
	(#2,#2,#2)
}

True
(
	Boolean first
	(
		first[A];
	)
)
{
	(A)
	(#1)
}

False
(
	Boolean first
	(
		first[A];
	)
)
{
	(A)
	(#2)
}

/* The boolean consists of two possible values. */
Boolean
(
	'2 first;
)

SmallerThanOrEqual
(
	Digit p1
	(
		d1[A];
		d2[B];
	)
	Digit p2
	(
		d1[C];
		d2[D];
	)
	Boolean p3
	(
		first[E];
	)
)
{
	(A,B,C,D,E)
	
	/* 0 < x = y */
	(#1,#1,#1,#1,#1)
	(#1,#1,#1,#2,#1)
	(#1,#1,#1,#3,#1)
	(#1,#1,#1,#4,#1)
	(#1,#1,#1,#5,#1)
	(#1,#1,#2,#1,#1)
	(#1,#1,#2,#2,#1)
	(#1,#1,#2,#3,#1)
	(#1,#1,#2,#4,#1)
	(#1,#1,#2,#5,#1)
	
	/* 1 >= x = y */
	(#1,#2,#1,#1,#2)
	(#1,#2,#1,#2,#1)
	(#1,#2,#1,#3,#1)
	(#1,#2,#1,#4,#1)
	(#1,#2,#1,#5,#1)
	(#1,#2,#2,#1,#1)
	(#1,#2,#2,#2,#1)
	(#1,#2,#2,#3,#1)
	(#1,#2,#2,#4,#1)
	(#1,#2,#2,#5,#1)

	/* 2 >= x = y */
	(#1,#3,#1,#1,#2)
	(#1,#3,#1,#2,#2)
	(#1,#3,#1,#3,#1)
	(#1,#3,#1,#4,#1)
	(#1,#3,#1,#5,#1)
	(#1,#3,#2,#1,#1)
	(#1,#3,#2,#2,#1)
	(#1,#3,#2,#3,#1)
	(#1,#3,#2,#4,#1)
	(#1,#3,#2,#5,#1)
	
	/* 3 >= x = y */
	(#1,#4,#1,#1,#2)
	(#1,#4,#1,#2,#2)
	(#1,#4,#1,#3,#2)
	(#1,#4,#1,#4,#1)
	(#1,#4,#1,#5,#1)
	(#1,#4,#2,#1,#1)
	(#1,#4,#2,#2,#1)
	(#1,#4,#2,#3,#1)
	(#1,#4,#2,#4,#1)
	(#1,#4,#2,#5,#1)

	/* 4 >= x = y */
	(#1,#5,#1,#1,#2)
	(#1,#5,#1,#2,#2)
	(#1,#5,#1,#3,#2)
	(#1,#5,#1,#4,#2)
	(#1,#5,#1,#5,#1)
	(#1,#5,#2,#1,#1)
	(#1,#5,#2,#2,#1)
	(#1,#5,#2,#3,#1)
	(#1,#5,#2,#4,#1)
	(#1,#5,#2,#5,#1)
	
	/* 5 >= x = y */
	(#2,#1,#1,#1,#2)
	(#2,#1,#1,#2,#2)
	(#2,#1,#1,#3,#2)
	(#2,#1,#1,#4,#2)
	(#2,#1,#1,#5,#2)
	(#2,#1,#2,#1,#1)
	(#2,#1,#2,#2,#1)
	(#2,#1,#2,#3,#1)
	(#2,#1,#2,#4,#1)
	(#2,#1,#2,#5,#1)
	
	/* 6 >= x = y */
	(#2,#2,#1,#1,#2)
	(#2,#2,#1,#2,#2)
	(#2,#2,#1,#3,#2)
	(#2,#2,#1,#4,#2)
	(#2,#2,#1,#5,#2)
	(#2,#2,#2,#1,#2)
	(#2,#2,#2,#2,#1)
	(#2,#2,#2,#3,#1)
	(#2,#2,#2,#4,#1)
	(#2,#2,#2,#5,#1)
	
	/* 7 >= x = y */
	(#2,#3,#1,#1,#2)
	(#2,#3,#1,#2,#2)
	(#2,#3,#1,#3,#2)
	(#2,#3,#1,#4,#2)
	(#2,#3,#1,#5,#2)
	(#2,#3,#2,#1,#2)
	(#2,#3,#2,#2,#2)
	(#2,#3,#2,#3,#1)
	(#2,#3,#2,#4,#1)
	(#2,#3,#2,#5,#1)
	
	/* 8 >= x = y */
	(#2,#4,#1,#1,#2)
	(#2,#4,#1,#2,#2)
	(#2,#4,#1,#3,#2)
	(#2,#4,#1,#4,#2)
	(#2,#4,#1,#5,#2)
	(#2,#4,#2,#1,#2)
	(#2,#4,#2,#2,#2)
	(#2,#4,#2,#3,#2)
	(#2,#4,#2,#4,#1)
	(#2,#4,#2,#5,#1)
	
	/* 9 >= x = y */
	(#2,#5,#1,#1,#2)
	(#2,#5,#1,#2,#2)
	(#2,#5,#1,#3,#2)
	(#2,#5,#1,#4,#2)
	(#2,#5,#1,#5,#2)
	(#2,#5,#2,#1,#2)
	(#2,#5,#2,#2,#2)
	(#2,#5,#2,#3,#2)
	(#2,#5,#2,#4,#2)
	(#2,#5,#2,#5,#1)

}


GreaterThanOrEqual
(
	Digit p1
	(
		d1[A];
		d2[B];
	)
	Digit p2
	(
		d1[C];
		d2[D];
	)
	Boolean p3
	(
		first[E];
	)
)
{
	(A,B,C,D,E)
	
	/* 0 >= x = y */
	(#1,#1,#1,#1,#1)
	(#1,#1,#1,#2,#2)
	(#1,#1,#1,#3,#2)
	(#1,#1,#1,#4,#2)
	(#1,#1,#1,#5,#2)
	(#1,#1,#2,#1,#2)
	(#1,#1,#2,#2,#2)
	(#1,#1,#2,#3,#2)
	(#1,#1,#2,#4,#2)
	(#1,#1,#2,#5,#2)
	
	/* 1 >= x = y */
	(#1,#2,#1,#1,#1)
	(#1,#2,#1,#2,#1)
	(#1,#2,#1,#3,#2)
	(#1,#2,#1,#4,#2)
	(#1,#2,#1,#5,#2)
	(#1,#2,#2,#1,#2)
	(#1,#2,#2,#2,#2)
	(#1,#2,#2,#3,#2)
	(#1,#2,#2,#4,#2)
	(#1,#2,#2,#5,#2)

	/* 2 >= x = y */
	(#1,#3,#1,#1,#1)
	(#1,#3,#1,#2,#1)
	(#1,#3,#1,#3,#1)
	(#1,#3,#1,#4,#2)
	(#1,#3,#1,#5,#2)
	(#1,#3,#2,#1,#2)
	(#1,#3,#2,#2,#2)
	(#1,#3,#2,#3,#2)
	(#1,#3,#2,#4,#2)
	(#1,#3,#2,#5,#2)
	
	/* 3 >= x = y */
	(#1,#4,#1,#1,#1)
	(#1,#4,#1,#2,#1)
	(#1,#4,#1,#3,#1)
	(#1,#4,#1,#4,#1)
	(#1,#4,#1,#5,#2)
	(#1,#4,#2,#1,#2)
	(#1,#4,#2,#2,#2)
	(#1,#4,#2,#3,#2)
	(#1,#4,#2,#4,#2)
	(#1,#4,#2,#5,#2)

	/* 4 >= x = y */
	(#1,#5,#1,#1,#1)
	(#1,#5,#1,#2,#1)
	(#1,#5,#1,#3,#1)
	(#1,#5,#1,#4,#1)
	(#1,#5,#1,#5,#1)
	(#1,#5,#2,#1,#2)
	(#1,#5,#2,#2,#2)
	(#1,#5,#2,#3,#2)
	(#1,#5,#2,#4,#2)
	(#1,#5,#2,#5,#2)
	
	/* 5 >= x = y */
	(#2,#1,#1,#1,#1)
	(#2,#1,#1,#2,#1)
	(#2,#1,#1,#3,#1)
	(#2,#1,#1,#4,#1)
	(#2,#1,#1,#5,#1)
	(#2,#1,#2,#1,#1)
	(#2,#1,#2,#2,#2)
	(#2,#1,#2,#3,#2)
	(#2,#1,#2,#4,#2)
	(#2,#1,#2,#5,#2)
	
	/* 6 >= x = y */
	(#2,#2,#1,#1,#1)
	(#2,#2,#1,#2,#1)
	(#2,#2,#1,#3,#1)
	(#2,#2,#1,#4,#1)
	(#2,#2,#1,#5,#1)
	(#2,#2,#2,#1,#1)
	(#2,#2,#2,#2,#1)
	(#2,#2,#2,#3,#2)
	(#2,#2,#2,#4,#2)
	(#2,#2,#2,#5,#2)
	
	/* 7 >= x = y */
	(#2,#3,#1,#1,#1)
	(#2,#3,#1,#2,#1)
	(#2,#3,#1,#3,#1)
	(#2,#3,#1,#4,#1)
	(#2,#3,#1,#5,#1)
	(#2,#3,#2,#1,#1)
	(#2,#3,#2,#2,#1)
	(#2,#3,#2,#3,#1)
	(#2,#3,#2,#4,#2)
	(#2,#3,#2,#5,#2)
	
	/* 8 >= x = y */
	(#2,#4,#1,#1,#1)
	(#2,#4,#1,#2,#1)
	(#2,#4,#1,#3,#1)
	(#2,#4,#1,#4,#1)
	(#2,#4,#1,#5,#1)
	(#2,#4,#2,#1,#1)
	(#2,#4,#2,#2,#1)
	(#2,#4,#2,#3,#1)
	(#2,#4,#2,#4,#1)
	(#2,#4,#2,#5,#2)
	
	/* 9 >= x = y */
	(#2,#5,#1,#1,#1)
	(#2,#5,#1,#2,#1)
	(#2,#5,#1,#3,#1)
	(#2,#5,#1,#4,#1)
	(#2,#5,#1,#5,#1)
	(#2,#5,#2,#1,#1)
	(#2,#5,#2,#2,#1)
	(#2,#5,#2,#3,#1)
	(#2,#5,#2,#4,#1)
	(#2,#5,#2,#5,#1)

}

/*
 * The plus relations for digits. All plus relations on multiple digits should be derivable from this
 * relation.
 */
Plus
(
	Digit p1
	(
		d1[A];
		d2[B];
	)
	Digit p2
	(
		d1[C];
		d2[D];
	)
	Digit p3
	(
		d1[E];
		d2[F];
	)
)
{
	(A,B,C,D,E,F)
	
	/* 0 + x = y */
	(#1,#1,#1,#1,#1,#1)
	(#1,#1,#1,#2,#1,#2)
	(#1,#1,#1,#3,#1,#3)
	(#1,#1,#1,#4,#1,#4)
	(#1,#1,#1,#5,#1,#5)
	(#1,#1,#2,#1,#2,#1)
	(#1,#1,#2,#2,#2,#2)
	(#1,#1,#2,#3,#2,#3)
	(#1,#1,#2,#4,#2,#4)
	(#1,#1,#2,#5,#2,#5)
	
	/* 1 + x = y */
	(#1,#2,#1,#1,#1,#2)
	(#1,#2,#1,#2,#1,#3)
	(#1,#2,#1,#3,#1,#4)
	(#1,#2,#1,#4,#1,#5)
	(#1,#2,#1,#5,#2,#1)
	(#1,#2,#2,#1,#2,#2)
	(#1,#2,#2,#2,#2,#3)
	(#1,#2,#2,#3,#2,#4)
	(#1,#2,#2,#4,#2,#5)
	(#1,#2,#2,#5,#1,#1)
	
	/* 2 + x = y */
	(#1,#3,#1,#1,#1,#3)
	(#1,#3,#1,#2,#1,#4)
	(#1,#3,#1,#3,#1,#5)
	(#1,#3,#1,#4,#2,#1)
	(#1,#3,#1,#5,#2,#2)
	(#1,#3,#2,#1,#2,#3)
	(#1,#3,#2,#2,#2,#4)
	(#1,#3,#2,#3,#2,#5)
	(#1,#3,#2,#4,#1,#1)
	(#1,#3,#2,#5,#1,#2)
	
	/* 3 + x = y */
	(#1,#4,#1,#1,#1,#4)
	(#1,#4,#1,#2,#1,#5)
	(#1,#4,#1,#3,#2,#1)
	(#1,#4,#1,#4,#2,#2)
	(#1,#4,#1,#5,#2,#3)
	(#1,#4,#2,#1,#2,#4)
	(#1,#4,#2,#2,#2,#5)
	(#1,#4,#2,#3,#1,#1)
	(#1,#4,#2,#4,#1,#2)
	(#1,#4,#2,#5,#1,#3)
	
	/* 4 + x = y */
	(#1,#5,#1,#1,#1,#5)
	(#1,#5,#1,#2,#2,#1)
	(#1,#5,#1,#3,#2,#2)
	(#1,#5,#1,#4,#2,#3)
	(#1,#5,#1,#5,#2,#4)
	(#1,#5,#2,#1,#2,#5)
	(#1,#5,#2,#2,#1,#1)
	(#1,#5,#2,#3,#1,#2)
	(#1,#5,#2,#4,#1,#3)
	(#1,#5,#2,#5,#1,#4)
	
	/* 5 + x = y */
	(#2,#1,#1,#1,#2,#1)
	(#2,#1,#1,#2,#2,#2)
	(#2,#1,#1,#3,#2,#3)
	(#2,#1,#1,#4,#2,#4)
	(#2,#1,#1,#5,#2,#5)
	(#2,#1,#2,#1,#1,#1)
	(#2,#1,#2,#2,#1,#2)
	(#2,#1,#2,#3,#1,#3)
	(#2,#1,#2,#4,#1,#4)
	(#2,#1,#2,#5,#1,#5)
	
	/* 6 + x = y */
	(#2,#2,#1,#1,#2,#2)
	(#2,#2,#1,#2,#2,#3)
	(#2,#2,#1,#3,#2,#4)
	(#2,#2,#1,#4,#2,#5)
	(#2,#2,#1,#5,#1,#1)
	(#2,#2,#2,#1,#1,#2)
	(#2,#2,#2,#2,#1,#3)
	(#2,#2,#2,#3,#1,#4)
	(#2,#2,#2,#4,#1,#5)
	(#2,#2,#2,#5,#2,#1)
	
	/* 7 + x = y */
	(#2,#3,#1,#1,#2,#3)
	(#2,#3,#1,#2,#2,#4)
	(#2,#3,#1,#3,#2,#5)
	(#2,#3,#1,#4,#1,#1)
	(#2,#3,#1,#5,#1,#2)
	(#2,#3,#2,#1,#1,#3)
	(#2,#3,#2,#2,#1,#4)
	(#2,#3,#2,#3,#1,#5)
	(#2,#3,#2,#4,#2,#1)
	(#2,#3,#2,#5,#2,#2)
	
	/* 8 + x = y */
	(#2,#4,#1,#1,#2,#4)
	(#2,#4,#1,#2,#2,#5)
	(#2,#4,#1,#3,#1,#1)
	(#2,#4,#1,#4,#1,#2)
	(#2,#4,#1,#5,#1,#3)
	(#2,#4,#2,#1,#1,#4)
	(#2,#4,#2,#2,#1,#5)
	(#2,#4,#2,#3,#2,#1)
	(#2,#4,#2,#4,#2,#2)
	(#2,#4,#2,#5,#2,#3)
	
	/* 9 + x = y */
	(#2,#5,#1,#1,#2,#5)
	(#2,#5,#1,#2,#1,#1)
	(#2,#5,#1,#3,#1,#2)
	(#2,#5,#1,#4,#1,#3)
	(#2,#5,#1,#5,#1,#4)
	(#2,#5,#2,#1,#1,#5)
	(#2,#5,#2,#2,#2,#1)
	(#2,#5,#2,#3,#2,#2)
	(#2,#5,#2,#4,#2,#3)
	(#2,#5,#2,#5,#2,#4)
}

/* define the ten digits as specifics from posset Digit */

Zero(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#1,#1)}
One(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#1,#2)}
Two(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#1,#3)}
Three(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#1,#4)}
Four(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#1,#5)}
Five(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#2,#1)}
Six(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#2,#2)}
Seven(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#2,#3)}
Eight(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#2,#4)}
Nine(Digit o1(d1[Y];d2[Z];)){(Y,Z)(#2,#5)}

/* A digit has 10 possibilities */

Digit
(
	'2 d1;
	'5 d2;
)